{"name": "test_log_in_button", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=133.0.6943.127)\nStacktrace:\n0   chromedriver                        0x000000010979ad98 chromedriver + 5954968\n1   chromedriver                        0x00000001097929ca chromedriver + 5921226\n2   chromedriver                        0x00000001092525e0 chromedriver + 415200\n3   chromedriver                        0x0000000109226475 chromedriver + 234613\n4   chromedriver                        0x00000001092d25ae chromedriver + 939438\n5   chromedriver                        0x00000001092f0d4c chromedriver + 1064268\n6   chromedriver                        0x00000001092c9de3 chromedriver + 904675\n7   chromedriver                        0x0000000109295c6a chromedriver + 691306\n8   chromedriver                        0x0000000109296dc1 chromedriver + 695745\n9   chromedriver                        0x000000010975de50 chromedriver + 5705296\n10  chromedriver                        0x0000000109761da0 chromedriver + 5721504\n11  chromedriver                        0x000000010973f797 chromedriver + 5580695\n12  chromedriver                        0x000000010976282b chromedriver + 5724203\n13  chromedriver                        0x000000010972dfc4 chromedriver + 5509060\n14  chromedriver                        0x0000000109781088 chromedriver + 5849224\n15  chromedriver                        0x000000010978124f chromedriver + 5849679\n16  chromedriver                        0x00000001097925a8 chromedriver + 5920168\n17  libsystem_pthread.dylib             0x00007ff818c2f253 _pthread_start + 99\n18  libsystem_pthread.dylib             0x00007ff818c2abef thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"2b7c44f89ab9c584de1c23e1a958d489\")>\n\n    def test_log_in_button(driver):\n>       assert driver.find_element(By.ID, \"login2\").is_displayed()\n\ntests/test_authorization_and_registration.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1105509e0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...7ff818c2f253 _pthread_start + 99\\\\n18  libsystem_pthread.dylib             0x00007ff818c2abef thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=133.0.6943.127)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010979ad98 chromedriver + 5954968\nE       1   chromedriver                        0x00000001097929ca chromedriver + 5921226\nE       2   chromedriver                        0x00000001092525e0 chromedriver + 415200\nE       3   chromedriver                        0x0000000109226475 chromedriver + 234613\nE       4   chromedriver                        0x00000001092d25ae chromedriver + 939438\nE       5   chromedriver                        0x00000001092f0d4c chromedriver + 1064268\nE       6   chromedriver                        0x00000001092c9de3 chromedriver + 904675\nE       7   chromedriver                        0x0000000109295c6a chromedriver + 691306\nE       8   chromedriver                        0x0000000109296dc1 chromedriver + 695745\nE       9   chromedriver                        0x000000010975de50 chromedriver + 5705296\nE       10  chromedriver                        0x0000000109761da0 chromedriver + 5721504\nE       11  chromedriver                        0x000000010973f797 chromedriver + 5580695\nE       12  chromedriver                        0x000000010976282b chromedriver + 5724203\nE       13  chromedriver                        0x000000010972dfc4 chromedriver + 5509060\nE       14  chromedriver                        0x0000000109781088 chromedriver + 5849224\nE       15  chromedriver                        0x000000010978124f chromedriver + 5849679\nE       16  chromedriver                        0x00000001097925a8 chromedriver + 5920168\nE       17  libsystem_pthread.dylib             0x00007ff818c2f253 _pthread_start + 99\nE       18  libsystem_pthread.dylib             0x00007ff818c2abef thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoSuchWindowException"}, "start": 1740332690643, "stop": 1740332690644, "uuid": "5e175450-486b-4067-a9c6-f261935e0a34", "historyId": "c9ec190bdff8fedb3ecf48fae87e2e2c", "testCaseId": "c9ec190bdff8fedb3ecf48fae87e2e2c", "fullName": "tests.test_authorization_and_registration#test_log_in_button", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization_and_registration"}, {"name": "host", "value": "MacBook-Pro-Natasha.local"}, {"name": "thread", "value": "78589-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization_and_registration"}]}