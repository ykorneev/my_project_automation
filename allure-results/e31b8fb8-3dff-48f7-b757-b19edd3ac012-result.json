{"name": "test_incorrect_card_number", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoAlertPresentException: Message: no such alert\n  (Session info: chrome=134.0.6998.89)\nStacktrace:\n0   chromedriver                        0x000000010722f808 chromedriver + 6105096\n1   chromedriver                        0x000000010722740a chromedriver + 6071306\n2   chromedriver                        0x0000000106cc2443 chromedriver + 414787\n3   chromedriver                        0x0000000106cab83e chromedriver + 321598\n4   chromedriver                        0x0000000106cd63d2 chromedriver + 496594\n5   chromedriver                        0x0000000106ce88e1 chromedriver + 571617\n6   chromedriver                        0x0000000106d3a69b chromedriver + 906907\n7   chromedriver                        0x0000000106ce86f5 chromedriver + 571125\n8   chromedriver                        0x0000000106d3a3e3 chromedriver + 906211\n9   chromedriver                        0x0000000106d0629a chromedriver + 692890\n10  chromedriver                        0x0000000106d073f1 chromedriver + 697329\n11  chromedriver                        0x00000001071eed00 chromedriver + 5840128\n12  chromedriver                        0x00000001071f2bd4 chromedriver + 5856212\n13  chromedriver                        0x00000001071c9936 chromedriver + 5687606\n14  chromedriver                        0x00000001071f35cb chromedriver + 5858763\n15  chromedriver                        0x00000001071b8024 chromedriver + 5615652\n16  chromedriver                        0x0000000107215368 chromedriver + 5997416\n17  chromedriver                        0x000000010721552f chromedriver + 5997871\n18  chromedriver                        0x0000000107226fe8 chromedriver + 6070248\n19  libsystem_pthread.dylib             0x00007ff80905c253 _pthread_start + 99\n20  libsystem_pthread.dylib             0x00007ff809057bef thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"912039be97ae5e6611300dfaedb360d3\")>\n\n    def test_incorrect_card_number(driver):\n        home_page = HomePage(driver)\n        product_page = ProductPage(driver)\n        cart_page = CartPage(driver)\n        home_page.select_category(\"Laptops\")  # Выбор категории\n        home_page.open_product(\"MacBook air\")  # Открытие страницы товара\n        product_page.add_to_cart()  # Добавление товара в корзину\n        cart_page.open_cart()  # Переход в корзину\n        cart_page.checkout(\n            name=\"Yura\",\n            country=\"Poland\",\n            city=\"Warsaw\",\n            card=\"1234567890123456\",\n            month=\"12\",\n            year=\"2025\"\n        ) # Оформление заказа без ввода номера карты\n>       alert_text = driver.switch_to.alert.text  # Ожидание появления алерта\n\ntests/test_add_items_to_cart_and_order_placement.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/switch_to.py:58: in alert\n    _ = alert.text\n.venv/lib/python3.12/site-packages/selenium/webdriver/common/alert.py:58: in text\n    return self.driver.execute(Command.W3C_GET_ALERT_TEXT)[\"value\"]\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1081c8dd0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such alert\",\"message\":\"no such alert\\\\n  (Session info: chrome=134.0.6...7ff80905c253 _pthread_start + 99\\\\n20  libsystem_pthread.dylib             0x00007ff809057bef thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoAlertPresentException: Message: no such alert\nE         (Session info: chrome=134.0.6998.89)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010722f808 chromedriver + 6105096\nE       1   chromedriver                        0x000000010722740a chromedriver + 6071306\nE       2   chromedriver                        0x0000000106cc2443 chromedriver + 414787\nE       3   chromedriver                        0x0000000106cab83e chromedriver + 321598\nE       4   chromedriver                        0x0000000106cd63d2 chromedriver + 496594\nE       5   chromedriver                        0x0000000106ce88e1 chromedriver + 571617\nE       6   chromedriver                        0x0000000106d3a69b chromedriver + 906907\nE       7   chromedriver                        0x0000000106ce86f5 chromedriver + 571125\nE       8   chromedriver                        0x0000000106d3a3e3 chromedriver + 906211\nE       9   chromedriver                        0x0000000106d0629a chromedriver + 692890\nE       10  chromedriver                        0x0000000106d073f1 chromedriver + 697329\nE       11  chromedriver                        0x00000001071eed00 chromedriver + 5840128\nE       12  chromedriver                        0x00000001071f2bd4 chromedriver + 5856212\nE       13  chromedriver                        0x00000001071c9936 chromedriver + 5687606\nE       14  chromedriver                        0x00000001071f35cb chromedriver + 5858763\nE       15  chromedriver                        0x00000001071b8024 chromedriver + 5615652\nE       16  chromedriver                        0x0000000107215368 chromedriver + 5997416\nE       17  chromedriver                        0x000000010721552f chromedriver + 5997871\nE       18  chromedriver                        0x0000000107226fe8 chromedriver + 6070248\nE       19  libsystem_pthread.dylib             0x00007ff80905c253 _pthread_start + 99\nE       20  libsystem_pthread.dylib             0x00007ff809057bef thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: NoAlertPresentException"}, "start": 1741821679064, "stop": 1741821683481, "uuid": "9148202d-4c39-4c33-9532-4abce3da46d3", "historyId": "357f8f66240ebb7a22ad5356f2512ea3", "testCaseId": "357f8f66240ebb7a22ad5356f2512ea3", "fullName": "tests.test_add_items_to_cart_and_order_placement#test_incorrect_card_number", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_items_to_cart_and_order_placement"}, {"name": "host", "value": "MacBook-Pro-Natasha.local"}, {"name": "thread", "value": "18976-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_items_to_cart_and_order_placement"}]}