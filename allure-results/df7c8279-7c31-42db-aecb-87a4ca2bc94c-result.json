{"name": "test_invalid_username", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (973, 36). Other element would receive the click: <div class=\"modal fade show\" id=\"signInModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"signInModalLabel\" style=\"display: block;\">...</div>\n  (Session info: chrome=133.0.6943.142)\nStacktrace:\n0   chromedriver                        0x000000010c1df708 chromedriver + 5969672\n1   chromedriver                        0x000000010c1d732a chromedriver + 5935914\n2   chromedriver                        0x000000010bc93650 chromedriver + 415312\n3   chromedriver                        0x000000010bcebc90 chromedriver + 777360\n4   chromedriver                        0x000000010bce9af1 chromedriver + 768753\n5   chromedriver                        0x000000010bce7182 chromedriver + 758146\n6   chromedriver                        0x000000010bce6880 chromedriver + 755840\n7   chromedriver                        0x000000010bcd8e3d chromedriver + 699965\n8   chromedriver                        0x000000010bd0b172 chromedriver + 905586\n9   chromedriver                        0x000000010bcd87b8 chromedriver + 698296\n10  chromedriver                        0x000000010bd0b32e chromedriver + 906030\n11  chromedriver                        0x000000010bd324f7 chromedriver + 1066231\n12  chromedriver                        0x000000010bd0af43 chromedriver + 905027\n13  chromedriver                        0x000000010bcd6cea chromedriver + 691434\n14  chromedriver                        0x000000010bcd7e41 chromedriver + 695873\n15  chromedriver                        0x000000010c1a2910 chromedriver + 5720336\n16  chromedriver                        0x000000010c1a6850 chromedriver + 5736528\n17  chromedriver                        0x000000010c183c07 chromedriver + 5594119\n18  chromedriver                        0x000000010c1a72fb chromedriver + 5739259\n19  chromedriver                        0x000000010c172484 chromedriver + 5522564\n20  chromedriver                        0x000000010c1c51d8 chromedriver + 5861848\n21  chromedriver                        0x000000010c1c539f chromedriver + 5862303\n22  chromedriver                        0x000000010c1d6f08 chromedriver + 5934856\n23  libsystem_pthread.dylib             0x00007ff818385253 _pthread_start + 99\n24  libsystem_pthread.dylib             0x00007ff818380bef thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"034575e974b6f9410f55600f68e2e0f6\")>\n\n    def test_invalid_username(driver):\n        wait = WebDriverWait(driver, 10)\n>       driver.find_element(By.ID, \"login2\").click()\n\ntests/test_authorization_and_registration.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10c896960>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...7ff818385253 _pthread_start + 99\\\\n24  libsystem_pthread.dylib             0x00007ff818380bef thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a class=\"nav-link\" href=\"#\" id=\"login2\" data-toggle=\"modal\" data-target=\"#logInModal\" style=\"display: block;\">...</a> is not clickable at point (973, 36). Other element would receive the click: <div class=\"modal fade show\" id=\"signInModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"signInModalLabel\" style=\"display: block;\">...</div>\nE         (Session info: chrome=133.0.6943.142)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010c1df708 chromedriver + 5969672\nE       1   chromedriver                        0x000000010c1d732a chromedriver + 5935914\nE       2   chromedriver                        0x000000010bc93650 chromedriver + 415312\nE       3   chromedriver                        0x000000010bcebc90 chromedriver + 777360\nE       4   chromedriver                        0x000000010bce9af1 chromedriver + 768753\nE       5   chromedriver                        0x000000010bce7182 chromedriver + 758146\nE       6   chromedriver                        0x000000010bce6880 chromedriver + 755840\nE       7   chromedriver                        0x000000010bcd8e3d chromedriver + 699965\nE       8   chromedriver                        0x000000010bd0b172 chromedriver + 905586\nE       9   chromedriver                        0x000000010bcd87b8 chromedriver + 698296\nE       10  chromedriver                        0x000000010bd0b32e chromedriver + 906030\nE       11  chromedriver                        0x000000010bd324f7 chromedriver + 1066231\nE       12  chromedriver                        0x000000010bd0af43 chromedriver + 905027\nE       13  chromedriver                        0x000000010bcd6cea chromedriver + 691434\nE       14  chromedriver                        0x000000010bcd7e41 chromedriver + 695873\nE       15  chromedriver                        0x000000010c1a2910 chromedriver + 5720336\nE       16  chromedriver                        0x000000010c1a6850 chromedriver + 5736528\nE       17  chromedriver                        0x000000010c183c07 chromedriver + 5594119\nE       18  chromedriver                        0x000000010c1a72fb chromedriver + 5739259\nE       19  chromedriver                        0x000000010c172484 chromedriver + 5522564\nE       20  chromedriver                        0x000000010c1c51d8 chromedriver + 5861848\nE       21  chromedriver                        0x000000010c1c539f chromedriver + 5862303\nE       22  chromedriver                        0x000000010c1d6f08 chromedriver + 5934856\nE       23  libsystem_pthread.dylib             0x00007ff818385253 _pthread_start + 99\nE       24  libsystem_pthread.dylib             0x00007ff818380bef thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "start": 1741032993222, "stop": 1741032994269, "uuid": "4f867e87-7e4d-4517-8f8f-cea2769500c8", "historyId": "da9a327b8662b48a1d7c79b3deeb82f0", "testCaseId": "da9a327b8662b48a1d7c79b3deeb82f0", "fullName": "tests.test_authorization_and_registration#test_invalid_username", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization_and_registration"}, {"name": "host", "value": "MacBook-Pro-Natasha.local"}, {"name": "thread", "value": "25107-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization_and_registration"}]}