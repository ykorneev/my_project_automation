{"name": "test_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: This user already exist.\nMessage: unexpected alert open: {Alert text : This user already exist.}\n  (Session info: chrome=133.0.6943.53)\nStacktrace:\n0   chromedriver                        0x0000000104f73bc8 chromedriver + 5766088\n1   chromedriver                        0x0000000104f6b7ea chromedriver + 5732330\n2   chromedriver                        0x0000000104a59680 chromedriver + 415360\n3   chromedriver                        0x0000000104af8f1e chromedriver + 1068830\n4   chromedriver                        0x0000000104ad0e23 chromedriver + 904739\n5   chromedriver                        0x0000000104a9cbea chromedriver + 691178\n6   chromedriver                        0x0000000104a9dd41 chromedriver + 695617\n7   chromedriver                        0x0000000104f37100 chromedriver + 5517568\n8   chromedriver                        0x0000000104f3b040 chromedriver + 5533760\n9   chromedriver                        0x0000000104f18c87 chromedriver + 5393543\n10  chromedriver                        0x0000000104f3bacb chromedriver + 5536459\n11  chromedriver                        0x0000000104f07544 chromedriver + 5322052\n12  chromedriver                        0x0000000104f596e8 chromedriver + 5658344\n13  chromedriver                        0x0000000104f598af chromedriver + 5658799\n14  chromedriver                        0x0000000104f6b3c8 chromedriver + 5731272\n15  libsystem_pthread.dylib             0x00007ff81b7cc253 _pthread_start + 99\n16  libsystem_pthread.dylib             0x00007ff81b7c7bef thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"6b31d999d897383abf19daccd499b30b\")>\n\n    def test_login(driver):\n        wait = WebDriverWait(driver, 10)\n>       driver.find_element(By.ID, \"login2\").click()\n\ntests/test_authorization_and_registration.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x107664a70>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"This user already exist.\"},\"error\":\"unexpected alert open\",\"messag...7ff81b7cc253 _pthread_start + 99\\\\n16  libsystem_pthread.dylib             0x00007ff81b7c7bef thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: This user already exist.\nE           Message: unexpected alert open: {Alert text : This user already exist.}\nE             (Session info: chrome=133.0.6943.53)\nE           Stacktrace:\nE           0   chromedriver                        0x0000000104f73bc8 chromedriver + 5766088\nE           1   chromedriver                        0x0000000104f6b7ea chromedriver + 5732330\nE           2   chromedriver                        0x0000000104a59680 chromedriver + 415360\nE           3   chromedriver                        0x0000000104af8f1e chromedriver + 1068830\nE           4   chromedriver                        0x0000000104ad0e23 chromedriver + 904739\nE           5   chromedriver                        0x0000000104a9cbea chromedriver + 691178\nE           6   chromedriver                        0x0000000104a9dd41 chromedriver + 695617\nE           7   chromedriver                        0x0000000104f37100 chromedriver + 5517568\nE           8   chromedriver                        0x0000000104f3b040 chromedriver + 5533760\nE           9   chromedriver                        0x0000000104f18c87 chromedriver + 5393543\nE           10  chromedriver                        0x0000000104f3bacb chromedriver + 5536459\nE           11  chromedriver                        0x0000000104f07544 chromedriver + 5322052\nE           12  chromedriver                        0x0000000104f596e8 chromedriver + 5658344\nE           13  chromedriver                        0x0000000104f598af chromedriver + 5658799\nE           14  chromedriver                        0x0000000104f6b3c8 chromedriver + 5731272\nE           15  libsystem_pthread.dylib             0x00007ff81b7cc253 _pthread_start + 99\nE           16  libsystem_pthread.dylib             0x00007ff81b7c7bef thread_start + 15\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:231: UnexpectedAlertPresentException"}, "start": 1739231225156, "stop": 1739231225161, "uuid": "df3c4e3b-e472-405d-8fc5-130b108d81fa", "historyId": "64ed14bba4e56324e103f70040f0793d", "testCaseId": "64ed14bba4e56324e103f70040f0793d", "fullName": "tests.test_authorization_and_registration#test_login", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_authorization_and_registration"}, {"name": "host", "value": "MacBook-Pro-Natasha.local"}, {"name": "thread", "value": "91139-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_authorization_and_registration"}]}